---
- name: Create RHEL 8 EC2 instance
  hosts: localhost
  connection: local
  gather_facts: no
  collections:
    - amazon.aws
    - ansible.builtin

  vars_files: 
    - credentials.yml
  vars:
    #Your region
    #region: us-east-1
    #region: "{{ which_region }}" 
    #sgname: AA-Lab
    #sgname: "{{ which_security_group }}" 
  tasks:

    - name: Gather VPC info
      ec2_vpc_subnet_info:
        region: "{{ which_region }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        filters:
          vpc-id: vpc-03f0aa053ce57e397
      register: subnetinfo

    #- name: Gather Security Group information
    #  ec2_group_info:
    #    region: "{{ region }}"
    #    aws_access_key: "{{ aws_access_key }}"
    #    aws_secret_key: "{{ aws_secret_key }}"
    #  register: sginfo

    - name: Gather Security Group information
      ec2_security_group_info:
        region: "{{ which_region }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        filters:
          vpc-id: vpc-03f0aa053ce57e397
      register: sginfo

    - name: Store vpc subnet fact
      set_fact:
        mysubnet: "{{ subnetinfo.subnets|map(attribute='subnet_id') | join(',')}}"

    - name: Store Security Group fact
      set_fact:
        mysg: "{{ sginfo.security_groups|map(attribute='group_id')|list }}"
    
    - name: print mysubnet
      debug: 
        var: mysubnet

    - name: EC2 basic provisioning
      ec2_instance:
        instance_type: t2.micro
        #image_id: ami-0ad8ecac8af5fc52b
        #image_id: ami-06640050dc3f556bb
        #image_id: ami-0720ac433acf46f73
        image_id: ami-03c8fa35fb3dafced
        count: "{{ how_many | int }}"
        region: "{{ which_region }}"
        security_groups: "{{ mysg }}"
        vpc_subnet_id: "{{ mysubnet }}"
        key_name: Ben-AAP25-Keys
        network:
          assign_public_ip: yes
        state: present
        wait: yes
        tags:
          owner: "{{ requester_email }}"
          stack: "{{ which_env }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
      register: ec2

    - name: gather running instance information
      ec2_instance_info:
        region: "{{ which_region }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        filters:
          "tag:stack": "{{ which_env }}"
      register: get_status
      until: get_status.instances | json_query('[*].public_ip_address') | length > 0 
      retries: 15
      delay: 4
      tags: gather

    - name: Store EC2 IP Information 
      set_fact:
        ec2_ip: "{{ ec2_ip | default([]) + [ item ] }}"
      loop: "{{ get_status.instances | json_query('[*].public_ip_address') }}"

    - name: Send IP Information and PEM Key info to user
      mail:
        host: smtp.gmail.com
        port: 587
        username: "{{ my_gmail_id }}"
        password: "{{ my_gmail_pw }}"
        to: "{{ requester_email }}"
        #to: "{{ requester_email }}"
        subject: "{{ ticket_number }} has been approved. Your EC2's are ready for use. See information to connect."
        body: "{{ lookup('template','aws_provision_email.j2') }}"
      delegate_to: localhost
      tags: sendemail
